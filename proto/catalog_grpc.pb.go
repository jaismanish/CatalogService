// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/catalog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CatalogService_AddRestaurant_FullMethodName  = "/CatalogService.CatalogService/AddRestaurant"
	CatalogService_AddMenuItem_FullMethodName    = "/CatalogService.CatalogService/AddMenuItem"
	CatalogService_GetRestaurants_FullMethodName = "/CatalogService.CatalogService/GetRestaurants"
	CatalogService_GetMenuItems_FullMethodName   = "/CatalogService.CatalogService/GetMenuItems"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	AddRestaurant(ctx context.Context, in *AddRestaurantRequest, opts ...grpc.CallOption) (*AddRestaurantResponse, error)
	AddMenuItem(ctx context.Context, in *AddMenuItemRequest, opts ...grpc.CallOption) (*AddMenuItemResponse, error)
	GetRestaurants(ctx context.Context, in *GetRestaurantsRequest, opts ...grpc.CallOption) (*GetRestaurantsResponse, error)
	GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) AddRestaurant(ctx context.Context, in *AddRestaurantRequest, opts ...grpc.CallOption) (*AddRestaurantResponse, error) {
	out := new(AddRestaurantResponse)
	err := c.cc.Invoke(ctx, CatalogService_AddRestaurant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) AddMenuItem(ctx context.Context, in *AddMenuItemRequest, opts ...grpc.CallOption) (*AddMenuItemResponse, error) {
	out := new(AddMenuItemResponse)
	err := c.cc.Invoke(ctx, CatalogService_AddMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRestaurants(ctx context.Context, in *GetRestaurantsRequest, opts ...grpc.CallOption) (*GetRestaurantsResponse, error) {
	out := new(GetRestaurantsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetRestaurants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetMenuItems(ctx context.Context, in *GetMenuItemsRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error) {
	out := new(GetMenuItemsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetMenuItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	AddRestaurant(context.Context, *AddRestaurantRequest) (*AddRestaurantResponse, error)
	AddMenuItem(context.Context, *AddMenuItemRequest) (*AddMenuItemResponse, error)
	GetRestaurants(context.Context, *GetRestaurantsRequest) (*GetRestaurantsResponse, error)
	GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) AddRestaurant(context.Context, *AddRestaurantRequest) (*AddRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestaurant not implemented")
}
func (UnimplementedCatalogServiceServer) AddMenuItem(context.Context, *AddMenuItemRequest) (*AddMenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenuItem not implemented")
}
func (UnimplementedCatalogServiceServer) GetRestaurants(context.Context, *GetRestaurantsRequest) (*GetRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurants not implemented")
}
func (UnimplementedCatalogServiceServer) GetMenuItems(context.Context, *GetMenuItemsRequest) (*GetMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItems not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_AddRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AddRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddRestaurant(ctx, req.(*AddRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_AddMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AddMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddMenuItem(ctx, req.(*AddMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetRestaurants(ctx, req.(*GetRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetMenuItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetMenuItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetMenuItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetMenuItems(ctx, req.(*GetMenuItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CatalogService.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRestaurant",
			Handler:    _CatalogService_AddRestaurant_Handler,
		},
		{
			MethodName: "AddMenuItem",
			Handler:    _CatalogService_AddMenuItem_Handler,
		},
		{
			MethodName: "GetRestaurants",
			Handler:    _CatalogService_GetRestaurants_Handler,
		},
		{
			MethodName: "GetMenuItems",
			Handler:    _CatalogService_GetMenuItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/catalog.proto",
}
