// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/catalog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CatalogService_AddRestaurant_FullMethodName  = "/proto.CatalogService/AddRestaurant"
	CatalogService_AddMenuItem_FullMethodName    = "/proto.CatalogService/AddMenuItem"
	CatalogService_GetRestaurants_FullMethodName = "/proto.CatalogService/GetRestaurants"
	CatalogService_GetMenuItems_FullMethodName   = "/proto.CatalogService/GetMenuItems"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	AddRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Restaurant, error)
	AddMenuItem(ctx context.Context, in *MenuItem, opts ...grpc.CallOption) (*MenuItem, error)
	GetRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CatalogService_GetRestaurantsClient, error)
	GetMenuItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CatalogService_GetMenuItemsClient, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) AddRestaurant(ctx context.Context, in *Restaurant, opts ...grpc.CallOption) (*Restaurant, error) {
	out := new(Restaurant)
	err := c.cc.Invoke(ctx, CatalogService_AddRestaurant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) AddMenuItem(ctx context.Context, in *MenuItem, opts ...grpc.CallOption) (*MenuItem, error) {
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, CatalogService_AddMenuItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CatalogService_GetRestaurantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[0], CatalogService_GetRestaurants_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceGetRestaurantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_GetRestaurantsClient interface {
	Recv() (*Restaurant, error)
	grpc.ClientStream
}

type catalogServiceGetRestaurantsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceGetRestaurantsClient) Recv() (*Restaurant, error) {
	m := new(Restaurant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogServiceClient) GetMenuItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CatalogService_GetMenuItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[1], CatalogService_GetMenuItems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceGetMenuItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_GetMenuItemsClient interface {
	Recv() (*MenuItem, error)
	grpc.ClientStream
}

type catalogServiceGetMenuItemsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceGetMenuItemsClient) Recv() (*MenuItem, error) {
	m := new(MenuItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	AddRestaurant(context.Context, *Restaurant) (*Restaurant, error)
	AddMenuItem(context.Context, *MenuItem) (*MenuItem, error)
	GetRestaurants(*emptypb.Empty, CatalogService_GetRestaurantsServer) error
	GetMenuItems(*emptypb.Empty, CatalogService_GetMenuItemsServer) error
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) AddRestaurant(context.Context, *Restaurant) (*Restaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRestaurant not implemented")
}
func (UnimplementedCatalogServiceServer) AddMenuItem(context.Context, *MenuItem) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenuItem not implemented")
}
func (UnimplementedCatalogServiceServer) GetRestaurants(*emptypb.Empty, CatalogService_GetRestaurantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestaurants not implemented")
}
func (UnimplementedCatalogServiceServer) GetMenuItems(*emptypb.Empty, CatalogService_GetMenuItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMenuItems not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_AddRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AddRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddRestaurant(ctx, req.(*Restaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_AddMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AddMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddMenuItem(ctx, req.(*MenuItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRestaurants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).GetRestaurants(m, &catalogServiceGetRestaurantsServer{stream})
}

type CatalogService_GetRestaurantsServer interface {
	Send(*Restaurant) error
	grpc.ServerStream
}

type catalogServiceGetRestaurantsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceGetRestaurantsServer) Send(m *Restaurant) error {
	return x.ServerStream.SendMsg(m)
}

func _CatalogService_GetMenuItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).GetMenuItems(m, &catalogServiceGetMenuItemsServer{stream})
}

type CatalogService_GetMenuItemsServer interface {
	Send(*MenuItem) error
	grpc.ServerStream
}

type catalogServiceGetMenuItemsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceGetMenuItemsServer) Send(m *MenuItem) error {
	return x.ServerStream.SendMsg(m)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRestaurant",
			Handler:    _CatalogService_AddRestaurant_Handler,
		},
		{
			MethodName: "AddMenuItem",
			Handler:    _CatalogService_AddMenuItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRestaurants",
			Handler:       _CatalogService_GetRestaurants_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMenuItems",
			Handler:       _CatalogService_GetMenuItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/catalog.proto",
}
